params {
    max_memory = 1.TB
    max_cpus   = 60
    max_time   = 120.h
    publish_dir_mode = 'copy'
    total_bases = null
    cami_config = "${projectDir}/assets/default_config.ini"
    err_path = "${projectDir}/assets/profiles"
    container_prefix = "${projectDir}/containers"
    outdir = "results"
}

executor {
    name = "local"
}


process {
    maxRetries = 2
    withLabel:process_single {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 1.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 1.h  * task.attempt, 'time'    ) }
        queue  = "short" 
    }
    withLabel:process_low {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 2.GB  * task.attempt, 'memory'  ) }
        time   = { check_max( 2.h   * task.attempt, 'time'    ) }
        queue  = "short" 
    }
    withLabel:process_medium {
        cpus   = { check_max( 4     * task.attempt, 'cpus'    ) }
        memory = { check_max( 4.GB  * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }
        queue  = "short" 
    }

    withLabel:process_high {
        cpus   = { check_max( 13     * task.attempt, 'cpus'    ) }
        memory = { check_max( 60.GB  * task.attempt, 'memory'  ) }
        time   = { check_max( 12.h   * task.attempt, 'time'    ) }
        queue  = "short" 
}
    withLabel:process_long {
        time   = { check_max( 120.h  * task.attempt, 'time'    ) }
        queue  = "long" 
}

    withName: ASSEMBLY_FINDER {
    ext.args = { [
        params.subsample ? "-nb ${params.total} --assembly-level complete" : "--accession",
        "--no-use-conda --compressed False"
        ].join(' ').trim()
        }
    publishDir = [
        path: { "${params.outdir}/download" },
        mode: params.publish_dir_mode,
        pattern: "*/*.tsv"
    ]
}
    withName: CAMISIM_TABLES {
    publishDir = [
        path: { "${params.outdir}/camisim" },
        mode: params.publish_dir_mode,
        pattern: "*/*.tsv"
    ]
}
    withName: CAMISIM_CONFIG {
    publishDir = [
        path: { "${params.outdir}/camisim" },
        mode: params.publish_dir_mode,
        pattern: "*.ini"
    ]
}
    withName: CAMISIM_SIMULATE {
    cpus   = { check_max( params.cpus * task.attempt, 'cpus') }
    publishDir = [
        path: { "${params.outdir}/camisim" },
        mode: params.publish_dir_mode,
        pattern: "**/*.{bam,txt,gz}"
    ]
}

    withName: MESS {
    cpus   = { check_max( params.cpus * task.attempt, 'cpus') }
    publishDir = [
        path: { "${params.outdir}/mess" },
        mode: params.publish_dir_mode,
        pattern: "**/*.{bam,txt,fq.gz}"
    ]
}

    withName: SEQKIT_SPLIT2 {
    publishDir = [
        path: { "${params.outdir}/camisim" },
        mode: params.publish_dir_mode,
        pattern: "*.fq.gz"
    ]
}

}

apptainer {
    enabled = true
    autoMounts = true
    cacheDir = "${projectDir}/containers"
}


def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
